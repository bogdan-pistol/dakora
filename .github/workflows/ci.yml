name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        test-type: ["unit"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync

    - name: Run validation tests
      run: uv run python validate_tests.py

    - name: Run ${{ matrix.test-type }} tests
      run: uv run python server/tests/test_runner.py ${{ matrix.test-type }} --verbose

  smoke-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync

    - name: Run smoke tests
      run: uv run python server/tests/test_runner.py smoke --verbose

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync

    - name: Install coverage dependencies
      run: uv add --dev pytest-cov

    - name: Run tests with coverage
      run: uv run python -m pytest --cov=server/dakora_server server/tests/ --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  version-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check platform version consistency
      run: |
        CLI_VERSION=$(grep '^version = ' cli/pyproject.toml | cut -d'"' -f2)
        SERVER_VERSION=$(grep '^version = ' server/pyproject.toml | cut -d'"' -f2)

        echo "CLI version: $CLI_VERSION"
        echo "Server version: $SERVER_VERSION"

        if [ "$CLI_VERSION" != "$SERVER_VERSION" ]; then
          echo "❌ Version mismatch: CLI ($CLI_VERSION) != Server ($SERVER_VERSION)"
          echo "Platform components (CLI + Server) should have the same version"
          exit 1
        fi

        echo "✅ Platform versions are in sync: $CLI_VERSION"

  build-packages:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [cli, server, packages/client-python]
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Build ${{ matrix.package }}
      run: |
        cd ${{ matrix.package }}
        uv build
        echo "✅ ${{ matrix.package }} builds successfully"

    - name: Check package with twine
      run: |
        cd ${{ matrix.package }}
        uv run twine check dist/*

  build-docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [server, studio]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build ${{ matrix.component }} Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        file: ./${{ matrix.component }}/Dockerfile
        push: false
        tags: dakora-${{ matrix.component }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max